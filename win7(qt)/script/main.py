# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'massons.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtCore import pyqtSignal, QObject, Qt, QThread
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication
from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui
from PyQt5.QtGui import *
from PyQt5.QtCore import *

import threading
import time

import _game
import _time


class ThreadClass(QThread):
        any_signal = QtCore.pyqtSignal(int)
        def __init__(self, parent = None):
                super(ThreadClass, self).__init__(parent)
                self.is_running = True
        def run(self):
                while True:
                        self.any_signal.emit(1)
                        time.sleep(0.1)
        def stop(self):
                self.is_running = False
                self.terminate()


class Ui(object):
        def setupUi(self, MainWindow):
                MainWindow.setObjectName("MainWindow")
                MainWindow.setWindowIcon(QtGui.QIcon('img/massons.ico'))
                MainWindow.resize(1200, 900)
                MainWindow.setStyleSheet("font: 75 12pt \"MS Shell Dlg 2\";")
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                self.centralwidget.setStyleSheet("")
                self.centralwidget.setObjectName("centralwidget")
                self.run = QtWidgets.QLabel(self.centralwidget)
                self.run.setGeometry(QtCore.QRect(20, 40, 400, 50))
                self.run.setStyleSheet("background-image : url(img/red.jpg);")
                self.run.setAlignment(QtCore.Qt.AlignCenter)
                self.run.setObjectName("run")
                self.door = QtWidgets.QLabel(self.centralwidget)
                self.door.setGeometry(QtCore.QRect(20, 110, 400, 50))
                self.door.setStyleSheet("background-image : url(img/red.jpg);")
                self.door.setAlignment(QtCore.Qt.AlignCenter)
                self.door.setObjectName("door")
                self.book = QtWidgets.QLabel(self.centralwidget)
                self.book.setGeometry(QtCore.QRect(20, 180, 400, 50))
                self.book.setStyleSheet("background-image : url(img/red.jpg);")
                self.book.setAlignment(QtCore.Qt.AlignCenter)
                self.book.setObjectName("book")
                self.coin = QtWidgets.QLabel(self.centralwidget)
                self.coin.setGeometry(QtCore.QRect(20, 250, 400, 50))
                self.coin.setStyleSheet("background-image : url(img/red.jpg);")
                self.coin.setAlignment(QtCore.Qt.AlignCenter)
                self.coin.setObjectName("coin")
                self.declaration = QtWidgets.QLabel(self.centralwidget)
                self.declaration.setGeometry(QtCore.QRect(20, 320, 400, 50))
                self.declaration.setStyleSheet("background-image : url(img/red.jpg);")
                self.declaration.setAlignment(QtCore.Qt.AlignCenter)
                self.declaration.setObjectName("declaration")
                self.brick = QtWidgets.QLabel(self.centralwidget)
                self.brick.setGeometry(QtCore.QRect(20, 390, 400, 50))
                self.brick.setStyleSheet("background-image : url(img/red.jpg);")
                self.brick.setAlignment(QtCore.Qt.AlignCenter)
                self.brick.setObjectName("brick")
                self.hand = QtWidgets.QLabel(self.centralwidget)
                self.hand.setGeometry(QtCore.QRect(20, 460, 400, 50))
                self.hand.setStyleSheet("background-image : url(img/red.jpg);")
                self.hand.setAlignment(QtCore.Qt.AlignCenter)
                self.hand.setObjectName("hand")
                self.cup = QtWidgets.QLabel(self.centralwidget)
                self.cup.setGeometry(QtCore.QRect(20, 530, 400, 50))
                self.cup.setStyleSheet("background-image : url(img/red.jpg);")
                self.cup.setAlignment(QtCore.Qt.AlignCenter)
                self.cup.setObjectName("cup")
                self.table = QtWidgets.QLabel(self.centralwidget)
                self.table.setGeometry(QtCore.QRect(20, 600, 400, 50))
                self.table.setStyleSheet("background-image : url(img/red.jpg);")
                self.table.setAlignment(QtCore.Qt.AlignCenter)
                self.table.setObjectName("table")
                self.president = QtWidgets.QLabel(self.centralwidget)
                self.president.setGeometry(QtCore.QRect(20, 670, 400, 50))
                self.president.setStyleSheet("background-image : url(img/red.jpg);")
                self.president.setAlignment(QtCore.Qt.AlignCenter)
                self.president.setObjectName("president")
                self.ring = QtWidgets.QLabel(self.centralwidget)
                self.ring.setGeometry(QtCore.QRect(20, 740, 400, 50))
                self.ring.setStyleSheet("background-image : url(img/red.jpg);")
                self.ring.setAlignment(QtCore.Qt.AlignCenter)
                self.ring.setObjectName("ring")
                self.players = QtWidgets.QLabel(self.centralwidget)
                self.players.setGeometry(QtCore.QRect(20, 810, 400, 50))
                self.players.setStyleSheet("background-image : url(img/red.jpg);")
                self.players.setAlignment(QtCore.Qt.AlignCenter)
                self.players.setObjectName("players")
                self.bt_init = QtWidgets.QPushButton(self.centralwidget)
                self.bt_init.setGeometry(QtCore.QRect(489, 30, 210, 50))
                self.bt_init.setObjectName("bt_init")
                self.bt_run = QtWidgets.QPushButton(self.centralwidget)
                self.bt_run.setGeometry(QtCore.QRect(949, 30, 210, 50))
                self.bt_run.setObjectName("bt_run")
                self.quest_state = QtWidgets.QLabel(self.centralwidget)
                self.quest_state.setGeometry(QtCore.QRect(719, 30, 210, 50))
                self.quest_state.setStyleSheet("background-color: rgb(0, 255, 0);")
                self.quest_state.setAlignment(QtCore.Qt.AlignCenter)
                self.quest_state.setObjectName("quest_state")
                self.label_14 = QtWidgets.QLabel(self.centralwidget)
                self.label_14.setGeometry(QtCore.QRect(489, 110, 210, 30))
                self.label_14.setAlignment(QtCore.Qt.AlignCenter)
                self.label_14.setObjectName("label_14")
                self.label_14.setStyleSheet("color: rgb(255, 255, 255);")
                self.label_15 = QtWidgets.QLabel(self.centralwidget)
                self.label_15.setGeometry(QtCore.QRect(719, 110, 210, 30))
                self.label_15.setAlignment(QtCore.Qt.AlignCenter)
                self.label_15.setObjectName("label_15")
                self.label_15.setStyleSheet("color: rgb(255, 255, 255);")
                self.label_16 = QtWidgets.QLabel(self.centralwidget)
                self.label_16.setGeometry(QtCore.QRect(949, 110, 210, 30))
                self.label_16.setAlignment(QtCore.Qt.AlignCenter)
                self.label_16.setObjectName("label_16")
                self.label_16.setStyleSheet("color: rgb(255, 255, 255);")
                self.bt_hallwayOn = QtWidgets.QPushButton(self.centralwidget)
                self.bt_hallwayOn.setGeometry(QtCore.QRect(489, 150, 100, 41))
                self.bt_hallwayOn.setObjectName("bt_hallwayOn")
                self.bt_hallwayOff = QtWidgets.QPushButton(self.centralwidget)
                self.bt_hallwayOff.setGeometry(QtCore.QRect(599, 150, 100, 41))
                self.bt_hallwayOff.setObjectName("bt_hallwayOff")
                self.bt_room1On = QtWidgets.QPushButton(self.centralwidget)
                self.bt_room1On.setGeometry(QtCore.QRect(719, 150, 100, 41))
                self.bt_room1On.setObjectName("bt_room1On")
                self.bt_room1Off = QtWidgets.QPushButton(self.centralwidget)
                self.bt_room1Off.setGeometry(QtCore.QRect(829, 150, 100, 41))
                self.bt_room1Off.setObjectName("bt_room1Off")
                self.bt_coinOn = QtWidgets.QPushButton(self.centralwidget)
                self.bt_coinOn.setGeometry(QtCore.QRect(949, 150, 100, 41))
                self.bt_coinOn.setObjectName("bt_coinOn")
                self.bt_coinOff = QtWidgets.QPushButton(self.centralwidget)
                self.bt_coinOff.setGeometry(QtCore.QRect(1059, 150, 100, 41))
                self.bt_coinOff.setObjectName("bt_coinOff")
                self.label_17 = QtWidgets.QLabel(self.centralwidget)
                self.label_17.setGeometry(QtCore.QRect(719, 210, 210, 30))
                self.label_17.setAlignment(QtCore.Qt.AlignCenter)
                self.label_17.setObjectName("label_17")
                self.label_17.setStyleSheet("color: rgb(255, 255, 255);")
                self.bt_brickOn = QtWidgets.QPushButton(self.centralwidget)
                self.bt_brickOn.setGeometry(QtCore.QRect(719, 250, 100, 41))
                self.bt_brickOn.setObjectName("bt_brickOn")
                self.bt_stoneOff = QtWidgets.QPushButton(self.centralwidget)
                self.bt_stoneOff.setGeometry(QtCore.QRect(1059, 250, 100, 41))
                self.bt_stoneOff.setObjectName("bt_stoneOff")
                self.bt_declarationOn = QtWidgets.QPushButton(self.centralwidget)
                self.bt_declarationOn.setGeometry(QtCore.QRect(489, 250, 100, 41))
                self.bt_declarationOn.setObjectName("bt_declarationOn")
                self.label_18 = QtWidgets.QLabel(self.centralwidget)
                self.label_18.setGeometry(QtCore.QRect(489, 210, 210, 30))
                self.label_18.setAlignment(QtCore.Qt.AlignCenter)
                self.label_18.setObjectName("label_18")
                self.label_18.setStyleSheet("color: rgb(255, 255, 255);")
                self.bt_declarationOff = QtWidgets.QPushButton(self.centralwidget)
                self.bt_declarationOff.setGeometry(QtCore.QRect(599, 250, 100, 41))
                self.bt_declarationOff.setObjectName("bt_declarationOff")
                self.label_19 = QtWidgets.QLabel(self.centralwidget)
                self.label_19.setGeometry(QtCore.QRect(949, 210, 210, 30))
                self.label_19.setAlignment(QtCore.Qt.AlignCenter)
                self.label_19.setObjectName("label_19")
                self.label_19.setStyleSheet("color: rgb(255, 255, 255);")
                self.bt_brickOff = QtWidgets.QPushButton(self.centralwidget)
                self.bt_brickOff.setGeometry(QtCore.QRect(829, 250, 100, 41))
                self.bt_brickOff.setObjectName("bt_brickOff")
                self.bt_stoneOn = QtWidgets.QPushButton(self.centralwidget)
                self.bt_stoneOn.setGeometry(QtCore.QRect(949, 250, 100, 41))
                self.bt_stoneOn.setObjectName("bt_stoneOn")
                self.label_20 = QtWidgets.QLabel(self.centralwidget)
                self.label_20.setGeometry(QtCore.QRect(719, 310, 210, 30))
                self.label_20.setAlignment(QtCore.Qt.AlignCenter)
                self.label_20.setObjectName("label_20")
                self.label_20.setStyleSheet("color: rgb(255, 255, 255);")
                self.bt_leftOn = QtWidgets.QPushButton(self.centralwidget)
                self.bt_leftOn.setGeometry(QtCore.QRect(719, 350, 100, 41))
                self.bt_leftOn.setObjectName("bt_leftOn")
                self.bt_tableOff = QtWidgets.QPushButton(self.centralwidget)
                self.bt_tableOff.setGeometry(QtCore.QRect(1059, 350, 100, 41))
                self.bt_tableOff.setObjectName("bt_tableOff")
                self.bt_room2On = QtWidgets.QPushButton(self.centralwidget)
                self.bt_room2On.setGeometry(QtCore.QRect(489, 350, 100, 41))
                self.bt_room2On.setObjectName("bt_room2On")
                self.label_21 = QtWidgets.QLabel(self.centralwidget)
                self.label_21.setGeometry(QtCore.QRect(489, 310, 210, 30))
                self.label_21.setAlignment(QtCore.Qt.AlignCenter)
                self.label_21.setObjectName("label_21")
                self.label_21.setStyleSheet("color: rgb(255, 255, 255);")
                self.bt_room2Off = QtWidgets.QPushButton(self.centralwidget)
                self.bt_room2Off.setGeometry(QtCore.QRect(599, 350, 100, 41))
                self.bt_room2Off.setObjectName("bt_room2Off")
                self.label_22 = QtWidgets.QLabel(self.centralwidget)
                self.label_22.setGeometry(QtCore.QRect(949, 310, 210, 30))
                self.label_22.setAlignment(QtCore.Qt.AlignCenter)
                self.label_22.setObjectName("label_22")
                self.label_22.setStyleSheet("color: rgb(255, 255, 255);")
                self.bt_leftOff = QtWidgets.QPushButton(self.centralwidget)
                self.bt_leftOff.setGeometry(QtCore.QRect(829, 350, 100, 41))
                self.bt_leftOff.setObjectName("bt_leftOff")
                self.bt_tableOn = QtWidgets.QPushButton(self.centralwidget)
                self.bt_tableOn.setGeometry(QtCore.QRect(949, 350, 100, 41))
                self.bt_tableOn.setObjectName("bt_tableOn")
                self.label_23 = QtWidgets.QLabel(self.centralwidget)
                self.label_23.setGeometry(QtCore.QRect(719, 410, 210, 30))
                self.label_23.setAlignment(QtCore.Qt.AlignCenter)
                self.label_23.setObjectName("label_23")
                self.label_23.setStyleSheet("color: rgb(255, 255, 255);")
                self.label_24 = QtWidgets.QLabel(self.centralwidget)
                self.label_24.setGeometry(QtCore.QRect(949, 410, 210, 30))
                self.label_24.setAlignment(QtCore.Qt.AlignCenter)
                self.label_24.setObjectName("label_24")
                self.label_24.setStyleSheet("color: rgb(255, 255, 255);")
                self.bt_room3On = QtWidgets.QPushButton(self.centralwidget)
                self.bt_room3On.setGeometry(QtCore.QRect(949, 450, 100, 41))
                self.bt_room3On.setObjectName("bt_room3On")
                self.bt_rightOn = QtWidgets.QPushButton(self.centralwidget)
                self.bt_rightOn.setGeometry(QtCore.QRect(719, 450, 100, 41))
                self.bt_rightOn.setObjectName("bt_rightOn")
                self.bt_room3Off = QtWidgets.QPushButton(self.centralwidget)
                self.bt_room3Off.setGeometry(QtCore.QRect(1059, 450, 100, 41))
                self.bt_room3Off.setObjectName("bt_room3Off")
                self.bt_rightOff = QtWidgets.QPushButton(self.centralwidget)
                self.bt_rightOff.setGeometry(QtCore.QRect(829, 450, 100, 41))
                self.bt_rightOff.setObjectName("bt_rightOff")
                self.label_25 = QtWidgets.QLabel(self.centralwidget)
                self.label_25.setGeometry(QtCore.QRect(719, 510, 210, 30))
                self.label_25.setAlignment(QtCore.Qt.AlignCenter)
                self.label_25.setObjectName("label_25")
                self.label_25.setStyleSheet("color: rgb(255, 255, 255);")
                self.label_26 = QtWidgets.QLabel(self.centralwidget)
                self.label_26.setGeometry(QtCore.QRect(949, 510, 210, 30))
                self.label_26.setAlignment(QtCore.Qt.AlignCenter)
                self.label_26.setObjectName("label_26")
                self.label_26.setStyleSheet("color: rgb(255, 255, 255);")
                self.bt_inputOn = QtWidgets.QPushButton(self.centralwidget)
                self.bt_inputOn.setGeometry(QtCore.QRect(949, 550, 100, 41))
                self.bt_inputOn.setObjectName("bt_inputOn")
                self.bt_underOn = QtWidgets.QPushButton(self.centralwidget)
                self.bt_underOn.setGeometry(QtCore.QRect(719, 550, 100, 41))
                self.bt_underOn.setObjectName("bt_underOn")
                self.bt_inputOff = QtWidgets.QPushButton(self.centralwidget)
                self.bt_inputOff.setGeometry(QtCore.QRect(1059, 550, 100, 41))
                self.bt_inputOff.setObjectName("bt_inputOff")
                self.bt_underOff = QtWidgets.QPushButton(self.centralwidget)
                self.bt_underOff.setGeometry(QtCore.QRect(829, 550, 100, 41))
                self.bt_underOff.setObjectName("bt_underOff")
                self.comboBox = QtWidgets.QComboBox(self.centralwidget)
                self.comboBox.setGeometry(QtCore.QRect(489, 630, 460, 50))
                self.comboBox.setObjectName("comboBox")
                self.comboBox.addItem("")
                self.comboBox.addItem("")
                self.comboBox.addItem("")
                self.comboBox.addItem("")
                self.comboBox.addItem("")
                self.comboBox.addItem("")
                self.comboBox.addItem("")
                self.comboBox.addItem("")
                self.comboBox.addItem("")
                self.bt_play = QtWidgets.QPushButton(self.centralwidget)
                self.bt_play.setGeometry(QtCore.QRect(489, 690, 140, 50))
                self.bt_play.setObjectName("bt_play")
                self.bt_pause = QtWidgets.QPushButton(self.centralwidget)
                self.bt_pause.setGeometry(QtCore.QRect(649, 690, 140, 50))
                self.bt_pause.setObjectName("bt_pause")
                self.bt_stop = QtWidgets.QPushButton(self.centralwidget)
                self.bt_stop.setGeometry(QtCore.QRect(809, 690, 140, 50))
                self.bt_stop.setObjectName("bt_stop")
                self.bt_alarm = QtWidgets.QPushButton(self.centralwidget)
                self.bt_alarm.setGeometry(QtCore.QRect(979, 630, 120, 110))
                self.bt_alarm.setObjectName("bt_alarm")
                self.slider = QtWidgets.QSlider(self.centralwidget)
                self.slider.setGeometry(QtCore.QRect(1140, 630, 20, 110))
                self.slider.setOrientation(QtCore.Qt.Vertical)
                self.slider.setObjectName("slider")
                self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
                self.progressBar.setGeometry(QtCore.QRect(490, 820, 461, 40))
                self.progressBar.setProperty("value", 0)
                self.progressBar.setObjectName("progressBar")
                self.progressBar.setStyleSheet("color: rgb(255, 255, 255);")
                self.bt_3min = QtWidgets.QPushButton(self.centralwidget)
                self.bt_3min.setGeometry(QtCore.QRect(980, 820, 80, 40))
                self.bt_3min.setObjectName("bt_3min")
                self.bt_m3min = QtWidgets.QPushButton(self.centralwidget)
                self.bt_m3min.setGeometry(QtCore.QRect(1080, 820, 80, 40))
                self.bt_m3min.setObjectName("bt_m3min")
                self.timer = QtWidgets.QLabel(self.centralwidget)
                self.timer.setGeometry(QtCore.QRect(490, 770, 461, 40))
                self.timer.setStyleSheet("font: 75 12pt \"MS Shell Dlg 2\";")
                self.timer.setTextFormat(QtCore.Qt.PlainText)
                self.timer.setAlignment(QtCore.Qt.AlignCenter)
                self.timer.setObjectName("timer")
                self.timer.setStyleSheet("color: rgb(255, 255, 255);")
                MainWindow.setCentralWidget(self.centralwidget)

                self.retranslateUi(MainWindow)
                QtCore.QMetaObject.connectSlotsByName(MainWindow)

                self.connect_functions()
                self.stop_timer = True
                self.start_worker()


        def start_worker(self):
                self.thread = ThreadClass(parent=None)
                self.thread.start()
                self.thread.any_signal.connect(self.main_loop)

        def stop_worker(self):
                self.thread.stop()

        def main_loop(self):
                if _game.settings['questStatus'] == 4:
                        self.stop_timer = True
                        self.timer1.stop()
                        self.bt_init.setEnabled(True)

                if _game.settings['initSensors']:
                        print('initsensors')
                        self.init_sensors()
                self.reset_sensors()
                self.reset_outs()

                if not _game.check() and not _game.settings['gameStatus'] and _game.settings['questStatus'] != 4:
                        _game.settings['questStatus'] = 1
                elif _game.check() and not _game.settings['gameStatus'] and _game.settings['questStatus'] != 4:
                        _game.settings['questStatus'] = 2

                if _game.outs['brick'] and _game.settings['brick_event']:
                        _game.settings['brick_event'] = False
                        threading.Thread(target=self.off_brick, daemon=True).start()

                if _game.settings['players_event']:
                        _game.settings['players_event'] = False
                        threading.Thread(target=self.play_5, daemon=True).start()
                        threading.Thread(target=self.play_20, daemon=True).start()

                if _game.settings['startStatus']:
                        _game.settings['startStatus'] = False
                        _game.settings['gameStatus'] = not _game.settings['gameStatus']

                        self.bt_init.setEnabled(False)
                        if _game.settings['gameStatus']:
                                _game.start_script()
                                _game.settings['questStatus'] = 3
                                self.timer1 = QTimer(self.centralwidget)
                                self.timer1.timeout.connect(self.timer_run)
                                self.timer1.start(1000)
                        else:
                                _game.settings['questStatus'] = 4
                                self.stop_timer = True
                                self.timer1.stop()

                self.change_quest_state_text()
                self.change_quest_state_color()
                self.reset_time()
                self.reset_progressbar()

        def off_brick(self):
                time.sleep(3)
                self.bt_brickOff_press()

        def play_5(self):
                time.sleep(5)
                _game.playersEvent_script(1)
        def play_20(self):
                time.sleep(20)
                _game.playersEvent_script(2)


        def red_sensor(self, sensor):
                sensor.setStyleSheet("background-image : url(img/red.jpg);")
        def green_sensor(self, sensor):
                sensor.setStyleSheet("background-image : url(img/green.jpg);")
        def red_out(self, out):
                out.setStyleSheet("background-color: rgb(255, 255, 255);")
        def green_out(self, out):
                out.setStyleSheet("background-color: rgb(0, 255, 0);")

        def init_sensors(self):
                if _game.inputs['runQuest']:
                        self.green_sensor(self.run)
                else:
                        self.red_sensor(self.run)

                if _game.inputs['doorRead']:
                        self.green_sensor(self.door)
                else:
                        self.red_sensor(self.door)

                if _game.inputs['bookRead']:
                        self.green_sensor(self.book)
                else:
                        self.red_sensor(self.book)

                if _game.inputs['coinRead']:
                        self.green_sensor(self.coin)
                else:
                        self.red_sensor(self.coin)

                if _game.inputs['declarationRead']:
                        self.green_sensor(self.declaration)
                else:
                        self.red_sensor(self.declaration)

                if _game.inputs['brickRead']:
                        self.green_sensor(self.brick)
                else:
                        self.red_sensor(self.brick)

                if _game.inputs['handRead']:
                        self.green_sensor(self.hand)
                else:
                        self.red_sensor(self.hand)

                if _game.inputs['cupRead']:
                        self.green_sensor(self.cup)
                else:
                        self.red_sensor(self.cup)

                if _game.inputs['tableRead']:
                        self.green_sensor(self.table)
                else:
                        self.red_sensor(self.table)

                if _game.inputs['presidentRead']:
                        self.green_sensor(self.president)
                else:
                        self.red_sensor(self.president)

                if _game.inputs['ringRead']:
                        self.green_sensor(self.ring)
                else:
                        self.red_sensor(self.ring)

                if _game.inputs['playersRead']:
                        self.green_sensor(self.players)
                else:
                        self.red_sensor(self.players)
                _game.settings['initSensors'] = False

        def reset_sensors(self):
                if _game.inputs['runQuest']:
                        self.green_sensor(self.run)
                else:
                        self.red_sensor(self.run)

                if _game.inputs['doorRead']:
                        self.green_sensor(self.door)
                else:
                        self.red_sensor(self.door)

                if _game.inputs['bookRead']:
                        self.green_sensor(self.book)

                if _game.inputs['coinRead']:
                        self.green_sensor(self.coin)

                if _game.inputs['declarationRead']:
                        self.green_sensor(self.declaration)

                if _game.inputs['brickRead']:
                        self.green_sensor(self.brick)

                if _game.inputs['handRead']:
                        self.green_sensor(self.hand)

                if _game.inputs['cupRead']:
                        self.green_sensor(self.cup)

                if _game.inputs['tableRead']:
                        self.green_sensor(self.table)

                if _game.inputs['presidentRead']:
                        self.green_sensor(self.president)

                if _game.inputs['ringRead']:
                        self.green_sensor(self.ring)

                if _game.inputs['playersRead']:
                        self.green_sensor(self.players)
                else:
                        self.red_sensor(self.players)

        def reset_outs(self):
                if _game.outs['hallway']:
                        self.green_out(self.bt_hallwayOn)
                else:
                        self.red_out(self.bt_hallwayOn)
                if _game.outs['room1']:
                        self.green_out(self.bt_room1On)
                else:
                        self.red_out(self.bt_room1On)
                if _game.outs['coin']:
                        self.green_out(self.bt_coinOn)
                else:
                        self.red_out(self.bt_coinOn)
                if _game.outs['declaration']:
                        self.green_out(self.bt_declarationOn)
                else:
                        self.red_out(self.bt_declarationOn)
                if _game.outs['brick']:
                        self.green_out(self.bt_brickOn)
                else:
                        self.red_out(self.bt_brickOn)
                if _game.outs['stones']:
                        self.green_out(self.bt_stoneOn)
                else:
                        self.red_out(self.bt_stoneOn)
                if _game.outs['room2']:
                        self.green_out(self.bt_room2On)
                else:
                        self.red_out(self.bt_room2On)
                if _game.outs['left']:
                        self.green_out(self.bt_leftOn)
                else:
                        self.red_out(self.bt_leftOn)
                if _game.outs['table']:
                        self.green_out(self.bt_tableOn)
                else:
                        self.red_out(self.bt_tableOn)
                if _game.outs['right']:
                        self.green_out(self.bt_rightOn)
                else:
                        self.red_out(self.bt_rightOn)
                if _game.outs['room3']:
                        self.green_out(self.bt_room3On)
                else:
                        self.red_out(self.bt_room3On)
                if _game.outs['under']:
                        self.green_out(self.bt_underOn)
                else:
                        self.red_out(self.bt_underOn)
                if _game.outs['input']:
                        self.green_out(self.bt_inputOn)
                else:
                        self.red_out(self.bt_inputOn)

        def change_quest_state_color(self):
                if _game.settings['questStatus'] == 1:
                        self.quest_state.setStyleSheet("background-color: rgb(255, 0, 0);")
                elif _game.settings['questStatus'] == 2:
                        self.quest_state.setStyleSheet("background-color: rgb(0, 255, 0);")
                elif _game.settings['questStatus'] == 3:
                        self.quest_state.setStyleSheet("background-color: rgb(255, 255, 0);")
                elif _game.settings['questStatus'] == 4:
                        self.quest_state.setStyleSheet("background-color: rgb(66, 171, 255);")

        def change_quest_state_text(self):
                if _game.settings['questStatus'] == 1:
                        self.quest_state.setText("Квест не собран")
                elif _game.settings['questStatus'] == 2:
                        self.quest_state.setText("Квест собран")
                elif _game.settings['questStatus'] == 3:
                        self.quest_state.setText("Квест запущен")
                elif _game.settings['questStatus'] == 4:
                        self.quest_state.setText("Квест окончен")


        def connect_functions(self):
                self.bt_init.clicked.connect(self.bt_init_press)
                self.bt_run.clicked.connect(self.bt_run_press)

                self.bt_hallwayOn.clicked.connect(self.bt_hallwayOn_press)
                self.bt_hallwayOff.clicked.connect(self.bt_hallwayOff_press)  
                self.bt_room1On.clicked.connect(self.bt_room1On_press)
                self.bt_room1Off.clicked.connect(self.bt_room1Off_press) 
                self.bt_coinOn.clicked.connect(self.bt_coinOn_press)
                self.bt_coinOff.clicked.connect(self.bt_coinOff_press) 
                self.bt_declarationOn.clicked.connect(self.bt_declarationOn_press)
                self.bt_declarationOff.clicked.connect(self.bt_declarationOff_press) 
                self.bt_brickOn.clicked.connect(self.bt_brickOn_press)
                self.bt_brickOff.clicked.connect(self.bt_brickOff_press) 
                self.bt_stoneOn.clicked.connect(self.bt_stoneOn_press)
                self.bt_stoneOff.clicked.connect(self.bt_stoneOff_press) 
                self.bt_room2On.clicked.connect(self.bt_room2On_press)
                self.bt_room2Off.clicked.connect(self.bt_room2Off_press) 
                self.bt_leftOn.clicked.connect(self.bt_leftOn_press)
                self.bt_leftOff.clicked.connect(self.bt_leftOff_press) 
                self.bt_tableOn.clicked.connect(self.bt_tableOn_press)
                self.bt_tableOff.clicked.connect(self.bt_tableOff_press) 
                self.bt_rightOn.clicked.connect(self.bt_rightOn_press)
                self.bt_rightOff.clicked.connect(self.bt_rightOff_press) 
                self.bt_room3On.clicked.connect(self.bt_room3On_press)
                self.bt_room3Off.clicked.connect(self.bt_room3Off_press)
                self.bt_underOn.clicked.connect(self.bt_underOn_press)
                self.bt_underOff.clicked.connect(self.bt_underOff_press) 
                self.bt_inputOn.clicked.connect(self.bt_inputOn_press)
                self.bt_inputOff.clicked.connect(self.bt_inputOff_press)  

                self.bt_play.clicked.connect(self.bt_play_press)
                self.bt_pause.clicked.connect(self.bt_pause_press)
                self.bt_stop.clicked.connect(self.bt_stop_press)
                self.bt_alarm.clicked.connect(self.bt_alarm_press)
                self.slider.valueChanged.connect(self.change_volume)

                self.bt_3min.clicked.connect(self.bt_3min_press)
                self.bt_m3min.clicked.connect(self.bt_m3min_press)


        def bt_init_press(self):
                _time.time = 0
                _time.time_limit = 3600
                _game.settings['initSensors'] = True
                _game.settings['questStatus'] = 1
                self.reset_time()
                self.reset_progressbar()

        def bt_run_press(self):
                _game.settings['startStatus'] = True
                self.stop_timer = not self.stop_timer

        def bt_hallwayOn_press(self):
                self.bt_hallwayOn.setStyleSheet("background-color: rgb(0, 255, 0);")
                _game.outs['hallway'] = True
                _game.reset_out('hallway')

        def bt_hallwayOff_press(self):
                self.bt_hallwayOn.setStyleSheet("background-color: rgb(255, 255, 255);") 
                _game.outs['hallway'] = False
                _game.reset_out('hallway')

        def bt_room1On_press(self):
                self.bt_room1On.setStyleSheet("background-color: rgb(0, 255, 0);")
                _game.outs['room1'] = True
                _game.reset_out('room1')

        def bt_room1Off_press(self):
                self.bt_room1On.setStyleSheet("background-color: rgb(255, 255, 255);") 
                _game.outs['room1'] = False
                _game.reset_out('room1')

        def bt_coinOn_press(self):
                self.bt_coinOn.setStyleSheet("background-color: rgb(0, 255, 0);")
                _game.outs['coin'] = True
                _game.reset_out('coin')

        def bt_coinOff_press(self):
                self.bt_coinOn.setStyleSheet("background-color: rgb(255, 255, 255);") 
                _game.outs['coin'] = False
                _game.reset_out('coin')

        def bt_declarationOn_press(self):
                self.bt_declarationOn.setStyleSheet("background-color: rgb(0, 255, 0);")
                _game.outs['declaration'] = True
                _game.reset_out('declaration')

        def bt_declarationOff_press(self):
                self.bt_declarationOn.setStyleSheet("background-color: rgb(255, 255, 255);") 
                _game.outs['declaration'] = False
                _game.reset_out('declaration')

        def bt_brickOn_press(self):
                self.bt_brickOn.setStyleSheet("background-color: rgb(0, 255, 0);")
                _game.outs['brick'] = True
                _game.reset_out('brick')
                _game.settings['brick_event'] = True

        def bt_brickOff_press(self):
                self.bt_brickOn.setStyleSheet("background-color: rgb(255, 255, 255);") 
                _game.outs['brick'] = False
                _game.reset_out('brick')

        def bt_stoneOn_press(self):
                self.bt_stoneOn.setStyleSheet("background-color: rgb(0, 255, 0);")
                _game.outs['stones'] = True
                _game.reset_out('stones')

        def bt_stoneOff_press(self):
                self.bt_stoneOn.setStyleSheet("background-color: rgb(255, 255, 255);") 
                _game.outs['stones'] = False
                _game.reset_out('stones')

        def bt_room2On_press(self):
                self.bt_room2On.setStyleSheet("background-color: rgb(0, 255, 0);")
                _game.outs['room2'] = True
                _game.reset_out('room2')

        def bt_room2Off_press(self):
                self.bt_room2On.setStyleSheet("background-color: rgb(255, 255, 255);") 
                _game.outs['room2'] = False
                _game.reset_out('room2')

        def bt_leftOn_press(self):
                self.bt_leftOn.setStyleSheet("background-color: rgb(0, 255, 0);")
                _game.outs['left'] = True
                _game.reset_out('left')

        def bt_leftOff_press(self):
                self.bt_leftOn.setStyleSheet("background-color: rgb(255, 255, 255);") 
                _game.outs['left'] = False
                _game.reset_out('left')

        def bt_tableOn_press(self):
                self.bt_tableOn.setStyleSheet("background-color: rgb(0, 255, 0);")
                _game.outs['table'] = True
                _game.reset_out('table')

        def bt_tableOff_press(self):
                self.bt_tableOn.setStyleSheet("background-color: rgb(255, 255, 255);") 
                _game.outs['table'] = False
                _game.reset_out('table')

        def bt_rightOn_press(self):
                self.bt_rightOn.setStyleSheet("background-color: rgb(0, 255, 0);")
                _game.outs['right'] = True
                _game.reset_out('right')

        def bt_rightOff_press(self):
                self.bt_rightOn.setStyleSheet("background-color: rgb(255, 255, 255);") 
                _game.outs['right'] = False
                _game.reset_out('right')

        def bt_room3On_press(self):
                self.bt_room3On.setStyleSheet("background-color: rgb(0, 255, 0);")
                _game.outs['room3'] = True
                _game.reset_out('room3')

        def bt_room3Off_press(self):
                self.bt_room3On.setStyleSheet("background-color: rgb(255, 255, 255);") 
                _game.outs['room3'] = False
                _game.reset_out('room3')

        def bt_underOn_press(self):
                self.bt_underOn.setStyleSheet("background-color: rgb(0, 255, 0);")
                _game.outs['under'] = True
                _game.reset_out('under')

        def bt_underOff_press(self):
                self.bt_underOn.setStyleSheet("background-color: rgb(255, 255, 255);") 
                _game.outs['under'] = False
                _game.reset_out('under')

        def bt_inputOn_press(self):
                self.bt_inputOn.setStyleSheet("background-color: rgb(0, 255, 0);")
                _game.outs['input'] = True
                _game.reset_out('input')

        def bt_inputOff_press(self):
                self.bt_inputOn.setStyleSheet("background-color: rgb(255, 255, 255);") 
                _game.outs['input'] = False
                _game.reset_out('input')       

        def bt_play_press(self):
                _game.play_music(self.comboBox.currentText())

        def bt_pause_press(self):
                _game.pause_music(self.comboBox.currentText())

        def bt_stop_press(self):
                _game.stop_music(self.comboBox.currentText())

        def bt_alarm_press(self):
                _game.play_music('Трек №9  «Alarm»')

        def change_volume(self, value):
                if _game.settings['volume'] != value:
                        _game.settings['volume'] = value
                        _game.change_volume()

        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "Массоны"))
                self.run.setText(_translate("MainWindow", "Запуск сценария / кнопка"))
                self.door.setText(_translate("MainWindow", "Геркона двери"))
                self.book.setText(_translate("MainWindow", "Книги"))
                self.coin.setText(_translate("MainWindow", "Монетница"))
                self.declaration.setText(_translate("MainWindow", "Кнопка декларации"))
                self.brick.setText(_translate("MainWindow", "Кнопка кирпича"))
                self.hand.setText(_translate("MainWindow", "Сканер руки"))
                self.cup.setText(_translate("MainWindow", "Кубок"))
                self.table.setText(_translate("MainWindow", "Ящик стола"))
                self.president.setText(_translate("MainWindow", "Президенты"))
                self.ring.setText(_translate("MainWindow", "Перстень"))
                self.players.setText(_translate("MainWindow", "Список участников"))
                self.bt_init.setText(_translate("MainWindow", "Init quest"))
                self.bt_run.setText(_translate("MainWindow", "Run quest"))
                self.quest_state.setText(_translate("MainWindow", "Квест собран"))
                self.label_14.setText(_translate("MainWindow", "Свет в коридоре"))
                self.label_15.setText(_translate("MainWindow", "Свет в 1 комнате"))
                self.label_16.setText(_translate("MainWindow", "Шкатулка"))
                self.bt_hallwayOn.setText(_translate("MainWindow", "On"))
                self.bt_hallwayOff.setText(_translate("MainWindow", "Off"))
                self.bt_room1On.setText(_translate("MainWindow", "On"))
                self.bt_room1Off.setText(_translate("MainWindow", "Off"))
                self.bt_coinOn.setText(_translate("MainWindow", "On"))
                self.bt_coinOff.setText(_translate("MainWindow", "Off"))
                self.label_17.setText(_translate("MainWindow", "Подсветка кирпича"))
                self.bt_brickOn.setText(_translate("MainWindow", "On"))
                self.bt_stoneOff.setText(_translate("MainWindow", "Off"))
                self.bt_declarationOn.setText(_translate("MainWindow", "On"))
                self.label_18.setText(_translate("MainWindow", "Декларация"))
                self.bt_declarationOff.setText(_translate("MainWindow", "Off"))
                self.label_19.setText(_translate("MainWindow", "Камни/ниша"))
                self.bt_brickOff.setText(_translate("MainWindow", "Off"))
                self.bt_stoneOn.setText(_translate("MainWindow", "On"))
                self.label_20.setText(_translate("MainWindow", "Левый ящик комода"))
                self.bt_leftOn.setText(_translate("MainWindow", "On"))
                self.bt_tableOff.setText(_translate("MainWindow", "Off"))
                self.bt_room2On.setText(_translate("MainWindow", "On"))
                self.label_21.setText(_translate("MainWindow", "Проход во 2 комнату (свет)"))
                self.bt_room2Off.setText(_translate("MainWindow", "Off"))
                self.label_22.setText(_translate("MainWindow", "Ящик стола"))
                self.bt_leftOff.setText(_translate("MainWindow", "Off"))
                self.bt_tableOn.setText(_translate("MainWindow", "On"))
                self.label_23.setText(_translate("MainWindow", "Правый ящик комода"))
                self.label_24.setText(_translate("MainWindow", "Проход в 3 комнату"))
                self.bt_room3On.setText(_translate("MainWindow", "On"))
                self.bt_rightOn.setText(_translate("MainWindow", "On"))
                self.bt_room3Off.setText(_translate("MainWindow", "Off"))
                self.bt_rightOff.setText(_translate("MainWindow", "Off"))
                self.label_25.setText(_translate("MainWindow", "Лаз"))
                self.label_26.setText(_translate("MainWindow", "ЭМ входа"))
                self.bt_inputOn.setText(_translate("MainWindow", "On"))
                self.bt_underOn.setText(_translate("MainWindow", "On"))
                self.bt_inputOff.setText(_translate("MainWindow", "Off"))
                self.bt_underOff.setText(_translate("MainWindow", "Off"))
                self.comboBox.setItemText(0, _translate("MainWindow", "Трек №1  «Райли»"))
                self.comboBox.setItemText(1, _translate("MainWindow", "Трек №2  «1-я комната»"))
                self.comboBox.setItemText(2, _translate("MainWindow", "Трек №3  «2-я комната»"))
                self.comboBox.setItemText(3, _translate("MainWindow", "Трек №4  «3-я комната»"))
                self.comboBox.setItemText(4, _translate("MainWindow", "Трек №5  «Сигнализация»"))
                self.comboBox.setItemText(5, _translate("MainWindow", "Трек №6  «Побег»"))
                self.comboBox.setItemText(6, _translate("MainWindow", "Трек №7  «Победа»"))
                self.comboBox.setItemText(7, _translate("MainWindow", "Трек №8  «Поражение»"))
                self.comboBox.setItemText(8, _translate("MainWindow", "Трек №9  «Alarm»"))
                self.bt_play.setText(_translate("MainWindow", "Play"))
                self.bt_pause.setText(_translate("MainWindow", "Pause"))
                self.bt_stop.setText(_translate("MainWindow", "Stop"))
                self.bt_alarm.setText(_translate("MainWindow", "Alarm"))
                self.bt_3min.setText(_translate("MainWindow", "+ 3 мин"))
                self.bt_m3min.setText(_translate("MainWindow", "- 3 мин"))
                self.timer.setText(_translate("MainWindow", "Времени квеста прошло: 00:00:00 / 01:00:00"))


        def timer_run(self):
                _time.time += 1
                print(_time.time)

                if _time.time == _time.time_limit:
                        self.stop_timer = True
                        _game.settings['questStatus'] = 4
                        _game.louse_script()
                        self.timer1.stop()

        def reset_time(self):
                self.timer.setText(f'Времени квеста прошло: '+\
                f'{_time.get_hours(_time.time)}:{_time.get_minutes(_time.time)}:{_time.get_seconds(_time.time)} / '+\
                f'{_time.get_hours(_time.time_limit)}:{_time.get_minutes(_time.time_limit)}:{_time.get_seconds(_time.time_limit)}')

        def reset_progressbar(self):
                self.progressBar.setProperty("value", int(_time.time/_time.time_limit*100))

        def bt_m3min_press(self):
                if _time.time_limit > 3600:
                        _time.time_limit -= 180
                self.reset_time()

        def bt_3min_press(self):
                _time.time_limit += 180
                self.reset_time()


stylesheet = """
    QMainWindow {
        background-image: url("img/background.jpeg"); 
        background-repeat: no-repeat; 
        background-position: center;
    }
"""


if __name__ == "__main__":
        import sys
        QApplication.setAttribute(Qt.AA_EnableHighDpiScaling)
        app = QtWidgets.QApplication(sys.argv)
        app.setStyleSheet(stylesheet)
        MainWindow = QtWidgets.QMainWindow()
        MainWindow.setFixedSize(1200, 900)
        ui = Ui()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())
